
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  subscriptionTier: 'subscriptionTier',
  subscriptionStatus: 'subscriptionStatus',
  stripeCustomerId: 'stripeCustomerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  source: 'source',
  sourceId: 'sourceId',
  name: 'name',
  description: 'description',
  url: 'url',
  category: 'category',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  discoveredAt: 'discoveredAt'
};

exports.Prisma.ProjectMetricsScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  stars: 'stars',
  forks: 'forks',
  issues: 'issues',
  contributors: 'contributors',
  upvotes: 'upvotes',
  comments: 'comments',
  views: 'views',
  dailyGrowth: 'dailyGrowth',
  weeklyGrowth: 'weeklyGrowth',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectAnalysisScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  score: 'score',
  trend: 'trend',
  marketPotential: 'marketPotential',
  competitionLevel: 'competitionLevel',
  successProbability: 'successProbability',
  competitors: 'competitors',
  keyInsights: 'keyInsights',
  risks: 'risks',
  opportunities: 'opportunities',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSavedProjectScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  projectId: 'projectId',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.UserSubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  priceId: 'priceId',
  status: 'status',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DataSourceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  isActive: 'isActive',
  apiConfig: 'apiConfig',
  credentials: 'credentials',
  lastCrawl: 'lastCrawl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CrawlLogScalarFieldEnum = {
  id: 'id',
  dataSourceId: 'dataSourceId',
  status: 'status',
  startTime: 'startTime',
  endTime: 'endTime',
  itemsFound: 'itemsFound',
  itemsSaved: 'itemsSaved',
  errorMessage: 'errorMessage',
  createdAt: 'createdAt'
};

exports.Prisma.ProjectTagScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  tag: 'tag',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  subscriptionTier: 'subscriptionTier',
  subscriptionStatus: 'subscriptionStatus',
  stripeCustomerId: 'stripeCustomerId'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.ProjectOrderByRelevanceFieldEnum = {
  id: 'id',
  source: 'source',
  sourceId: 'sourceId',
  name: 'name',
  description: 'description',
  url: 'url'
};

exports.Prisma.ProjectMetricsOrderByRelevanceFieldEnum = {
  id: 'id',
  projectId: 'projectId'
};

exports.Prisma.ProjectAnalysisOrderByRelevanceFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  trend: 'trend',
  marketPotential: 'marketPotential',
  competitionLevel: 'competitionLevel'
};

exports.Prisma.UserSavedProjectOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  projectId: 'projectId',
  notes: 'notes'
};

exports.Prisma.UserSubscriptionOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  priceId: 'priceId',
  status: 'status'
};

exports.Prisma.DataSourceOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName'
};

exports.Prisma.CrawlLogOrderByRelevanceFieldEnum = {
  id: 'id',
  dataSourceId: 'dataSourceId',
  status: 'status',
  errorMessage: 'errorMessage'
};

exports.Prisma.ProjectTagOrderByRelevanceFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  tag: 'tag'
};


exports.Prisma.ModelName = {
  User: 'User',
  Project: 'Project',
  ProjectMetrics: 'ProjectMetrics',
  ProjectAnalysis: 'ProjectAnalysis',
  UserSavedProject: 'UserSavedProject',
  UserSubscription: 'UserSubscription',
  DataSource: 'DataSource',
  CrawlLog: 'CrawlLog',
  ProjectTag: 'ProjectTag'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
